// Model of a clamped plate, i.e. plate model with pure Dirichlet BC
//                      \Delta^2 w = f in \Omega
//                               w = 0 on \partial \Omega
//   \frac{\partial w}{\partial n} = 0 on \partial \Omega
// Solved as a system of two PDE-s of lower order.

macro Grad(u)[dx(u), dy(u)] // EOM

int N=16;

int p=4;
real[int] L2err(p);
real[int] H1err(p);
real[int] L2order(p-1);
real[int] H1order(p-1);

real E=200*10^6, nu=0.3; //steel
real k=0.001; //compensation for E in q
real t=0.01; //thickness 
real D=-12*k*(1-nu*nu)/(E*t*t*t);
func q=D*4*(pi^4)*sin(pi*x)*sin(pi*y); //load

for(int i=0; i<p; i++)
{
	mesh Th=square(N,N);
	plot(Th,cmm="Th");
	fespace Vh(Th,P1);

//	Vh f=D*4*(pi^4)*sin(pi*x)*sin(pi*y)*k;
//	plot(f,dim=3,value=true,wait=true,cmm="");

	Vh u,v,w;

	solve problem1(w,v) = int2d(Th)(Grad(w)'*Grad(v))
   		                - int2d(Th)(q*v)
						+ on(1,2,3,4,w=0);

	solve problem2(u,v) = int2d(Th)(Grad(u)'*Grad(v))
   		                - int2d(Th)(w*v)
    	   	            + on(1,2,3,4,u=0);

	plot(u,dim=3,cmm="app.sol.",value=1,wait=1,fill=1);

	Vh ue=D*sin(pi*x)*sin(pi*y);

	plot(ue,dim=3,cmm="exact",fill=1,value=1);
	L2err[i]=sqrt(int2d(Th)(ue-u)^2);
	H1err[i]=sqrt(L2err[i]^2+int2d(Th)((dx(ue)-dx(u))^2+(dy(ue)-dy(u))^2));

	cout << "L2 error: " << L2err[i] << endl;
	cout << "H1 error: " << H1err[i] << endl;

	N=N*2;
}

for(int j=0; j<p-1; j++)
{
//	cout << "L2 error: " << L2err[j] << endl;
	L2order[j]=log(L2err[j]/L2err[j+1])/log(2.);
	cout<<"red (L2):"<<L2order[j]<<endl;
//	cout << "H1 error: " << H1err[j] << endl;
	H1order[j]=log(H1err[j]/H1err[j+1])/log(2.);
	cout<<"red (H1):"<<L2order[j]<<endl;
}