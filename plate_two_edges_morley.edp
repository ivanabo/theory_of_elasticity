load "Morley"
macro bilaplacien(u,v) ( dxx(u)*dxx(v)+dyy(u)*dyy(v)+2.*dxy(u)*dxy(v) ) // EOM 

int N=16;
mesh Th=square(N,N);
plot(Th,wait=true);
fespace Vh(Th,P2Morley);

real E=200*10^6, nu=0.3; //steel 2*10^11, graphene 2*10^12
real k=0.001; //compensation for E in q
real t=0.01; //thickness 
real D=-12*(1-nu*nu)/(E*t*t*t);
func q=D*sin(x)*sin(y); //load

Vh [u,ux,uy],[v,vx,vy];

//clamped on two edges
solve bilap([u,ux,uy],[v,vx,vy]) = int2d(Th)(bilaplacien(u,v))
								 - int2d(Th)(q*v)
								 + on(1,4,u=0,ux=0,uy=0);
   
plot(u,dim=3,cmm="u",value=true,wait=1,fill=1);

//real coef = 1;
//mesh th1 = movemesh(Th, [x+ux*coef, y+uy*coef]);
//plot(th1,wait=1);